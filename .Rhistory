fnClf(X[[1]], trainIndex)
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
fnClf(X[[1]], trainIndex)
}
for (i in 1:3){
cat("***** current list: ", i)
fnClf(X[[i]], trainIndex)
}
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
XFixed <- colwise(fnDisc)(dataTrain[1:3], method='fixed')
datatFinal <- X[[1]]
dataFinal <- X[[1]]
dataFinal$name <- data$基金会名称
View(datatFinal)
dataFinal <- dataFinal$name <- data$基金会名称
View(datatFinal)
XFinal <- dataFinal$name <- data$基金会名称
View(datatFinal)
cols
df <- data.frame(data[cols[1]], dataFinal)
View(df)
dataFinal <- X[[1]]
data[cols[1]]
dataFinal <- X[[1]]
dataFinal
rbind(data[cols[1]], dataFinal)
cbind(data[cols[1]], dataFinal)
dataFinal <- cbind(data[cols[1]], dataFinal)
write.csv("./data/基金会财务信息年分权重后提取关键列（分类后）.csv")
write.csv(dataFinal, "./data/基金会财务信息年分权重后提取关键列（分类后）.csv")
XEqualFreq
xEqualFreq <- discretize(x, method = 'frequency', categories = 3, labels = c(0, 1, 2))
xEqualFreq
View(dataTrain)
Xjinzichan <- cbind(dataFinal$净资产, dataTrain$净资产)
View(Xjinzichan)
??aggregate
Xjinzichan
colnames(Xjinzichan)
colnames(Xjinzichan) <- c('v1', 'v2')
colnames(Xjinzichan) <- c('v1', 'v2')
aggregate(x = v2, by = b1, FUN='mean')
colnames(Xjinzichan)
aggregate(x = Xjinzichan$v2, by = Xjinzichan$v1 , FUN='mean')
aggregate(x = Xjinzichan[,2], by = Xjinzichan[,1] , FUN='mean')
unique.array(Xjinzichan[, 2])
aggregate(x = Xjinzichan[,2], by = c(1,2,3), FUN=min)
aggregate(x = Xjinzichan[,2], by = list(1:3), FUN=min)
Xjinzichan[,2]
aggregate(x = Xjinzichan[,2], by = list(Xjinzichan[, 1]), FUN=min)
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=min)
table(Xjinzichan[, 2])
unique(table(Xjinzichan[, 2]))
table(Xjinzichan[, 2])
table(Xjinzichan[, 1])
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=min)
Zongshouru <- cbind(dataFinal$总收入, dataTrain$总收入)
colnames(Zongshouru) <- c('v1', 'v2')
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=mean)
Zongshouru <- cbind(dataFinal$总收入, dataTrain$总收入)
colnames(Zongshouru) <- c('v1', 'v2')
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=desc())
aggregate(x = Zongshouru[, 2], by = list(Zongshouru[, 1]), FUN=mean)
Zongzhichu <- cbind(dataFinal$总收入, dataTrain$总支出)
colnames(Zongzhichu) <- c('v1', 'v2')
aggregate(x = Zongzhichu[, 2], by = list(Zongzhichu[, 1]), FUN=mean)
Zongzhichu <- cbind(dataFinal$总收入, dataTrain$总支出)
colnames(Zongzhichu) <- c('v1', 'v2')
aggregate(x = Zongzhichu[, 2], by = list(Zongzhichu[, 1]), FUN=mean)
View(datatFinal)
# discretization finantial data -------------------------------------------
data <- read.csv("./data/基金会财务信息年分权重后结果统计（分类后）.csv", encoding = "utf-8")
cols <- colnames(data)
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
# to make shou ru, zhi chu, fei yong smaller than 1
dataTrain[2] <- dataTrain[2] / dataTrain[1]
dataTrain[3] <- dataTrain[3] / dataTrain[1]
dataTrain[4] <- dataTrain[4] / dataTrain[1]
head(dataTrain, n = 2)
Y <- dataTrain$label
XEqualFreq <- colwise(fnDisc)(dataTrain[c(1:4)], method='frequency')
XEqualInterval <- colwise(fnDisc)(dataTrain[1:4], method='interval')
XCluster <- colwise(fnDisc)(dataTrain[1:4], method='cluster')
X <- list()
X[[1]] <- addY(XEqualFreq, Y)
X[[2]] <- addY(XEqualInterval, Y)
X[[3]] <- addY(XCluster, Y)
split = 0.6
trainIndex <- createDataPartition(dataTrain$label, p = split, list=FALSE)
fnClf <- function(X, trainIndex){
Xtrain <- X[trainIndex, ]
Xtest <- X[-trainIndex, ]
Ytrain <- Xtrain$target
Ytest <- Xtest$target
model <- NaiveBayes(target~., data = Xtrain)
Ypred <- predict(model, Xtest)
confusionMatrix(Ypred$class, Ytest)
}
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
library(discretization)
dataTrain$label <- as.factor(dataTrain$label)
Y <- dataTrain$label
XEqualFreq <- colwise(fnDisc)(dataTrain[c(1:4)], method='frequency')
XEqualInterval <- colwise(fnDisc)(dataTrain[1:4], method='interval')
XCluster <- colwise(fnDisc)(dataTrain[1:4], method='cluster')
X <- list()
X[[1]] <- addY(XEqualFreq, Y)
X[[2]] <- addY(XEqualInterval, Y)
X[[3]] <- addY(XCluster, Y)
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
dataFinal <- X[[1]]
dataFinal <- cbind(data[cols[1]], dataFinal)
write.csv(dataFinal, "./data/基金会财务信息年分权重后提取关键列（分类后）.csv")
Xjinzichan <- cbind(dataFinal$净资产, dataTrain$净资产)
colnames(Xjinzichan) <- c('v1', 'v2')
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=mean)
Zongshouru <- cbind(dataFinal$总收入, dataTrain$总收入)
colnames(Zongshouru) <- c('v1', 'v2')
aggregate(x = Zongshouru[, 2], by = list(Zongshouru[, 1]), FUN=mean)
Zongzhichu <- cbind(dataFinal$总收入, dataTrain$总支出)
colnames(Zongzhichu) <- c('v1', 'v2')
aggregate(x = Zongzhichu[, 2], by = list(Zongzhichu[, 1]), FUN=mean)
Zongfeiyong<- cbind(dataFinal$费用合计, dataTrain$费用合计)
colnames(Zongfeiyong) <- c('v1', 'v2')
# Zong zhi chu
aggregate(x = Zongfeiyong[, 2], by = list(Zongfeiyong[, 1]), FUN=mean)
# Group.1          x
# 1       1 -0.2957747
# 2       2  0.3089209
# 3       3  1.8594327
View(datatFinal)
View(dataFinal)
write.csv(dataFinal, "./data/基金会财务信息年分权重后提取关键列（分类后）.csv")
dataFinal
View(dataFinal)
View(dataTrain)
View(datatFinal)
View(dataFinal)
View(datatFinal)
View(dataFinal)
View(dataTrain)
rbind(dataTrain, dataFinal)
View(dataFinal)
View(datatFinal)
cbind(dataTrain, dataFinal)
data.use <- cbind(dataTrain, dataFinal)
View(data.use)
colnames(dataTrain)
paste0(colnames(dataTrain), "-label")
colnames(dataTrain) <- paste0(colnames(dataTrain), "-label")
colnames(datTrain)
colnames(dataTrain)
data.use <- cbind(dataTrain, dataFinal)
colnames(data.use)
boxplot(score~label, data = pure, main = '等级 vs 透明度分数', xlabel = "等级", ylabel = "透明度分数",
col=(c("gold", "green", "blue")))
basic <- c("jingzichan", "shouru", "zhichu", "feiyong", "target")
colnames(dataTrain) <- paste0(basic, "-label")
colnames(dataTrain)
colnames(dataFinal) <- basic
colnames(dataFinal)
View(datatFinal)
View(datatFinal)
View(dataFinal)
View(dataTrain)
View(dataFinal)
colnames(datatFinal) <- basic
colnames(datatFinal) <- basic[-1]
colnames(datatFinal) <- basic[-5]
colnames(datatFinal)
View(datatFinal)
data.use <- cbind(dataTrain, datatFinal)
View(data.use)
boxplot(jingzichan-label~jingzichan, data = data.use, main = '净资产', col=(c("gold", "green", "blue")))
View(data.use)
basic <- c("jingzichan", "shouru", "zhichu", "feiyong", "target")
colnames(dataTrain) <- paste0(basic, "_label")
colnames(datatFinal) <- basic[-5]
data.use <- cbind(dataTrain, datatFinal)
boxplot(jingzichan-label~jingzichan, data = data.use, main = '净资产', col=(c("gold", "green", "blue")))
boxplot(jingzichan_label~jingzichan, data = data.use, main = '净资产', col=(c("gold", "green", "blue")))
aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=mean)
temp.1 <- aggregate(x = Xjinzichan[, 2], by = list(Xjinzichan[, 1]), FUN=mean)
plot(temp.1)
?? plot
plot(temp.1, main="净资产", type='l')
plot(temp.1, main="净资产", type='l', xlabel=c("小型", "中型", "大型"))
Xjinzichan
newLabel <- c("小型", "中型", "大型")
newLabel.1 <- c("小型", "中型", "大型")
length(newLabel.1)
Xjinzichan[, 2]
Xjinzichan[, 1]
colnames(Xjinzichan)
labelChange <- function(data, label, value, name){
for (i in 1: length(label)){
data[data$v2 == value[i], ] <- label[i]
}
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
plot(temp, main=name, type = 'l')
}
newLabel.1 <- c("小型", "中型", "大型")
value.1 <- c(1, 2, 3)
data.1 <- Xjinzichan
labelChange(data.1, newLabel.1, value.1, "净资产")
labelChange <- function(data, label, value, name){
for (i in 1: length(label)){
data[data[, 1] == value[i], ] <- label[i]
}
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
plot(temp, main=name, type = 'l')
}
newLabel.1 <- c("小型", "中型", "大型")
value.1 <- c(1, 2, 3)
data.1 <- Xjinzichan
labelChange(data.1, newLabel.1, value.1, "净资产")
}
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
debugSource('~/Documents/WorkSpace/Songbird/src/chen_recsys.R')
label <- c("小型", "中型", "大型")
value <- c(1, 2, 3)
data <- Xjinzichan
for (i in 1: length(label)){
data[data[, 1] == value[i], ] <- label[i]
}
data
Xjinzichan
labelChange <- function(data, label, value, name){
for (i in 1: length(label)){
data[data[, 1] == value[i], 1] <- label[i]
}
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
plot(temp, main=name, type = 'l')
}
label <- c("小型", "中型", "大型")
value <- c(1, 2, 3)
data <- Xjinzichan
labelChange(data.1, newLabel.1, value.1, "净资产")
for (i in 1: length(label)){
data[data[, 1] == value[i], 1] <- label[i]
}
data
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
data[, 1]
data[, 2] <- as.numeric(data[, 2])
data
data[, 2] <- as.numeric(data[, 2])
temp <- aggregate(x = data[, 2], by = list(data[, 1]), FUN=mean)
apply(data, 2, type)
apply(data, 2, class)
data[, 2] <- apply(data[, 2], 2, as.numeric)
data[, 2] <- apply(data[, 2], 1, as.numeric)
data[, 2] <- as.numeric(data[, 2])
apply(data, 2, class)
as.numeric(data[, 2])
as.numeric(data[, 2])
y <- as.numeric(data[, 2])
y
data[, 2] <- y
apply(data, 2, class)
x <- data[, 1]
y <- as.numeric(data[, 2])
x <- data[, 1]
class(y)
name <- data[, 1]
target <- as.numeric(data[, 2])
name <- data[, 1]
temp <- aggregate(x = target, by = list(name), FUN=mean)
plot(temp, main=name, type = 'l')
temp
barplot(temp, main=name, type = 'l')
help barplot
?? barplot
barplot(cbind(name, target), main=name, type = 'l')
barplot(cbind(arget, name), main=name, type = 'l')
plot(temp)
plot(temp, type='h')
temp
table(temp)
temp <- aggregate(x = target, by = list(name), FUN=mean)
name
plot(target ~ name)
class(temp)
plot(temp)
plot(temp$Group.1, temp$x)
plot(temp$Group.1, temp$x, type='h')
?? plot
plot(temp$Group.1, temp$x, type='p')
data
data[, 2] <- y
data
target <- as.numeric(data[, 2])
name <- data[, 1]
??boxplot
boxplot(target ~ name , main = '净资产',
col=(c("gold", "green", "blue")))
boxplot(target ~ name , main = '净资产 vs 等级',
col=(c("gold", "green", "blue")))
boxplot(target ~ name , main = '等级 vs 净资产',
col=(c("gold", "green", "blue")))
data[, 1]
data[, 2]
labelChange <- function(data, label, value, name){
for (i in 1: length(label)){
data[data[, 1] == value[i], 1] <- label[i]
}
target <- as.numeric(data[, 2])
name <- data[, 1]
temp <- aggregate(x = target, by = list(name), FUN=mean)
boxplot(target ~ name , main = '等级 vs 净资产',
col=(c("gold", "green", "blue")))
}
Zongshouru
aggregate(x = Zongshouru[, 2], by = list(Zongshouru[, 1]), FUN=mean)
label <- c("低", "中", "高")
value <- c(1, 2, 3)
data <- Zongshouru
labelChange(data, label, value, "总收入")
aggregate(x = pure[, 3], by = list(pure[, 4]), FUN=mean)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualizatio
pure <- read.csv("./data/透明度信息.csv", encoding = "utf-8")
pure <- na.omit(pure)
pure.use <- pure[-c(1)]
pure.use <- scale(pure.use)
pure.use <- na.omit(pure.use)
k3 <- kmeans(pure.use, centers = 3, nstart = 25)
fviz_cluster(k3, data = pure.use, title='paiming and score')
pure$label <- k3$cluster
aggregate(x = pure[, 3], by = list(pure[, 4]), FUN=mean)
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
library(caret)
library(klaR)
source('~/Documents/WorkSpace/Songbird/src/chen_recsys.R', echo=TRUE)
library(e1071)
# discretization finantial data -------------------------------------------
data <- read.csv("./data/基金会财务信息年分权重后结果统计（分类后）.csv", encoding = "utf-8")
cols <- colnames(data)
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
# to make shou ru, zhi chu, fei yong smaller than 1
dataTrain[2] <- dataTrain[2] / dataTrain[1]
dataTrain[3] <- dataTrain[3] / dataTrain[1]
dataTrain[4] <- dataTrain[4] / dataTrain[1]
#
head(dataTrain, n = 2)
# disc
library(discretization)
dataTrain$label <- as.factor(dataTrain$label)
res <- disc.Topdown(dataTrain, method = 1)
res$Disc.data
# still too many intervals left we need to find a better discretization methodres
library(arules)
library(plyr)
fnDisc <- function(X, method){
return (discretize(X, method, categories = 3, labels=c(0,1,2)))
}
#
x <- dataTrain[, 1]
xEqualFreq <- discretize(x, method = 'frequency', categories = 3, labels = c(0, 1, 2))
#
Y <- dataTrain$label
XEqualFreq <- colwise(fnDisc)(dataTrain[c(1:4)], method='frequency')
XEqualInterval <- colwise(fnDisc)(dataTrain[1:4], method='interval')
XCluster <- colwise(fnDisc)(dataTrain[1:4], method='cluster')
addY <- function(X, Y){
X$target <- Y
return(X)
}
X <- list()
X[[1]] <- addY(XEqualFreq, Y)
X[[2]] <- addY(XEqualInterval, Y)
X[[3]] <- addY(XCluster, Y)
# classification to choose which type of discretization that we are going to use
library(caret)
library(klaR)
library(e1071)
split = 0.6
trainIndex <- createDataPartition(dataTrain$label, p = split, list=FALSE)
fnClf <- function(X, trainIndex){
Xtrain <- X[trainIndex, ]
Xtest <- X[-trainIndex, ]
Ytrain <- Xtrain$target
Ytest <- Xtest$target
model <- NaiveBayes(target~., data = Xtrain)
Ypred <- predict(model, Xtest)
confusionMatrix(Ypred$class, Ytest)
}
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
# discretization finantial data -------------------------------------------
data <- read.csv("./data/基金会财务信息年分权重后结果统计（分类后）.csv", encoding = "utf-8")
cols <- colnames(data)
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
# to make shou ru, zhi chu, fei yong smaller than 1
dataTrain[2] <- dataTrain[2] / dataTrain[1]
dataTrain[3] <- dataTrain[3] / dataTrain[1]
dataTrain[4] <- dataTrain[4] / dataTrain[1]
#
head(dataTrain, n = 2)
# disc
library(discretization)
dataTrain$label <- as.factor(dataTrain$label)
res <- disc.Topdown(dataTrain, method = 1)
res$Disc.data
# still too many intervals left we need to find a better discretization methodres
library(arules)
library(plyr)
fnDisc <- function(X, method){
return (discretize(X, method, categories = 3, labels=c(0,1,2)))
}
#
x <- dataTrain[, 1]
xEqualFreq <- discretize(x, method = 'frequency', categories = 3, labels = c(0, 1, 2))
#
Y <- dataTrain$label
XEqualFreq <- colwise(fnDisc)(dataTrain[c(1:4)], method='frequency')
XEqualInterval <- colwise(fnDisc)(dataTrain[1:4], method='interval')
XCluster <- colwise(fnDisc)(dataTrain[1:4], method='cluster')
addY <- function(X, Y){
X$target <- Y
return(X)
}
X <- list()
X[[1]] <- addY(XEqualFreq, Y)
X[[2]] <- addY(XEqualInterval, Y)
X[[3]] <- addY(XCluster, Y)
# classification to choose which type of discretization that we are going to use
library(caret)
library(klaR)
library(e1071)
split = 0.6
trainIndex <- createDataPartition(dataTrain$label, p = split, list=FALSE)
fnClf <- function(X, trainIndex){
Xtrain <- X[trainIndex, ]
Xtest <- X[-trainIndex, ]
Ytrain <- Xtrain$target
Ytest <- Xtest$target
model <- NaiveBayes(target~., data = Xtrain)
Ypred <- predict(model, Xtest)
confusionMatrix(Ypred$class, Ytest)
}
# equal frequency
for (i in 1:3){
cat("***** current list: ", i)
print(fnClf(X[[i]], trainIndex))
}
X
trainIndex <- createDataPartition(dataTrain$label, p = split, list=FALSE)
data <- read.csv("./data/基金会财务信息年分权重后结果统计（分类后）.csv", encoding = "utf-8")
cols <- colnames(data)
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
dataTrain[2] <- dataTrain[2] / dataTrain[1]
dataTrain[3] <- dataTrain[3] / dataTrain[1]
dataTrain[4] <- dataTrain[4] / dataTrain[1]
head(dataTrain, n = 2)
library(discretization)
dataTrain$label <- as.factor(dataTrain$label)
head(dataTrain, n = 2)
data <- read.csv("./data/基金会财务信息年分权重后结果统计（分类后）.csv", encoding = "utf-8")
View(data)
cols <- colnames(data)
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
dataTrain[2] <- dataTrain[2] / dataTrain[1]
choiceCol <- cols[c(7, 12, 11, 22, 23)]
dataTrain <- data[choiceCol]
View(data)
choiceCol <- cols[c(2, 3, 4, 5, 6)]
dataTrain <- data[choiceCol]
dataTrain[2] <- dataTrain[2] / dataTrain[1]
dataTrain[3] <- dataTrain[3] / dataTrain[1]
dataTrain[4] <- dataTrain[4] / dataTrain[1]
head(dataTrain, n = 2)
library(discretization)
dataTrain$label <- as.factor(dataTrain$label)
res <- disc.Topdown(dataTrain, method = 1)
res$cutp
res$Disc.data
?? disc.Topdown
fnDisc <- function(X, method){
return (discretize(X, method, categories = 3, labels=c(0,1,2)))
}
